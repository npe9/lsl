PriorityQueue(>:E,E->Bool, E): trait
  % Enumerate by order on elements
  assumes TotalOrder(E for T)
  includes Integer
  introduces
    empty:                 -> Queue[E] 
    add:       E, Queue[E] -> Queue[E]
    count:     E, Queue[E] -> Int
    __ \in __: E, Queue[E] -> Bool
    head:      Queue[E]    -> E
    tail:      Queue[E]    -> Queue[E]
    len:       Queue[E]    -> Int
    isEmpty:   Queue[E]    -> Bool
  asserts
    sort Queue[E] generated by empty, add
    sort Queue[E] partitioned by head, tail, isEmpty
    \forall e, e1: E, q: Queue[E]
      count(e, empty) = 0;
      count(e, add(e1, q)) =
        count(e, q) + (if e = e1 then 1 else 0);
      e \in q <=> count(e, q) > 0;
      head(add(e, q)) =
        (if q = empty \/ e > head(q) then e
         else head(q));
      tail(add(e, q)) =
        (if q = empty \/ e > head(q) then q 
         else add(e, tail(q)));
      len(empty) = 0;
      len(add(e, q)) = len(q) + 1;
      isEmpty(q) <=> q = empty
  implies
    Container(Queue[E] for C, add for insert)
    \forall e, e1, e2: E, q: Queue[E]
      add(e1, add(e2, q)) = add(e2, add(e1, q));
      len(q) >= 0;
      add(e, q) \neq empty
    converts count, \in, head, tail, len, isEmpty
      exempting head(empty), tail(empty)

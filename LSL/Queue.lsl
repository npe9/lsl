Queue(E): trait
  % FIFO operators
  includes Integer
  introduces 
    empty:                 -> Queue[E]
    append:    E, Queue[E] -> Queue[E]
    count:     E, Queue[E] -> Int
    __ \in __: E, Queue[E] -> Bool
    head:      Queue[E]    -> E
    tail:      Queue[E]    -> Queue[E]
    len:       Queue[E]    -> Int
    isEmpty:   Queue[E]    -> Bool
  asserts
    sort Queue[E] generated by empty, append
    \forall q: Queue[E], e, e1: E
      count(e, empty) = 0;
      count(e, append(e1, q)) =
        count(e, q) + (if e = e1 then 1 else 0);
      e \in q <=> count(e, q) > 0;
      head(append(e, q)) =
        (if q = empty then e else head(q));
      tail(append(e, q)) =
        (if q = empty then empty
         else append(e, tail(q)));
      len(empty) = 0;
      len(append(e, q)) = len(q) + 1;
      isEmpty(q) <=> q = empty
  implies 
    Container(Queue[E] for C, append for insert)
    sort Queue[E] partitioned by head, tail, isEmpty
    \forall q: Queue[E]
      len(q) >= 0
    converts head, tail, len
      exempting head(empty), tail(empty)

Deque(E): trait
  % Double ended queue operators
  includes Integer
  introduces
    empty:                  -> Deque[E]
    __ -| __:   E, Deque[E] -> Deque[E]
    __ |- __:   Deque[E], E -> Deque[E]
    count:      E, Deque[E] -> Int
    __ \in __:  E, Deque[E] -> Bool
    head, last: Deque[E]    -> E
    tail, init: Deque[E]    -> Deque[E]
    len:        Deque[E]    -> Int
    isEmpty:    Deque[E]    -> Bool
  asserts
    sort Deque[E] generated by empty, |-
    \forall e, e1, e2: E, d: Deque[E]
      count(e, empty) = 0;
      count(e, e1 -| d) =
        count(e, d) + (if e = e1 then 1 else 0);
      e \in d <=> count(e, d) > 0;
      e -| empty = empty |- e;
      (e1 -| d) |- e2 = e1 -| (d |- e2);
      head(e -| d) = e;
      last(d |- e) = e;
      tail(e -| d) = d;
      init(d |- e) = d;
      len(empty) = 0;
      len(d |- e) = len(d) + 1;
      isEmpty(d) <=> d = empty
  implies
    Stack(Deque for Stack, head for top, tail for pop,
          -| for push, len for size),
    Queue(Deque for Queue, -| for append, 
          last for head, init for tail)
    sort Deque[E] generated by empty, -|
    sort Deque[E] partitioned by len, head, tail
    sort Deque[E] partitioned by len, last, init
    \forall d: Deque[E]
      d \neq empty => head(d) -| tail(d) = d;
      d \neq empty => init(d) |- last(d) = d
    converts head, last, tail, init, len
      exempting head(empty), last(empty),
        tail(empty), init(empty)

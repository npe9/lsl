BinaryTree(E): trait
  % One of the many interesting tree structures
  introduces
    [__]:          E                -> Tree[E]
    [__, __]:      Tree[E], Tree[E] -> Tree[E]
    content:       Tree[E]          -> E
    first, second: Tree[E]          -> Tree[E]
    isLeaf:        Tree[E]          -> Bool
  asserts
    sort Tree[E] generated by [__], [__, __]
    sort Tree[E] partitioned by content, first, second, isLeaf
    \forall e: E, t1, t2: Tree[E]
      content([e]) = e;
      first([t1, t2]) = t1;
      second([t1, t2]) = t2;
      isLeaf([e]);
      ~isLeaf([t1, t2])
  implies converts isLeaf
